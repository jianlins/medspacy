name: manual_pip_git

on:
  workflow_dispatch

jobs:

  test:
  
    # TODO: Do we care if this only runs on allowed branches since we check push/pull_request above?
    #if: github.ref == 'refs/heads/master' OR github.ref == 'refs/heads/develop'

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        # python-version: [3.8]
        python-version: [3.8, 3.9, "3.10.x", "3.11.x"]
        # revised from https://github.com/actions/cache/blob/main/examples.md#python---pip
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3
    - name: Git clone repo and remove source code
      run: |
        pwd
        ls
        # remove cloned source code to ensure test on installed medspacy
        python -c "import shutil;shutil.rmtree('medspacy')"
        python -c "import shutil;shutil.rmtree('resources')"
        ls

    - name: Set up pip
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}   
        cache: 'pip'   
        cache-dependency-path: |
          'requirements/requirements.txt'
          'requirements/requirements_tests.txt'
    - run: |
        python --version
        pip install --upgrade pip
    
  

    - name: Install formal released medspacy
      run: |
        pwd
        ls
        pip install git+https://github.com/jianlins/medspacy.git

    - name: Install dependencies to run pytest
      run: |
        pip install --use-pep517 -r requirements/requirements_tests.txt
        python -m spacy download en_core_web_sm

    - name: print medspacy version
      run: python -c 'import medspacy; print(medspacy.__version__); print(medspacy.__file__)'
    
    - name: Test with pytest
      # need to run pytest after a clean pip install to 100% replicate the users' environment
      run: |        
        # run everything besides the QuickUMLS span group tests...
        pytest -k "not test_span_groups and not test_overlapping_spans and not test_multiword_span"
        # now in a separate session we can run the QuickUMLS span group tests...
        pytest -k "test_span_groups or test_overlapping_spans or test_multiword_span"
